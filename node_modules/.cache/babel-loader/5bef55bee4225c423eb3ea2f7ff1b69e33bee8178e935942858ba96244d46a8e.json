{"ast":null,"code":"var _UserService;\nimport axios from \"axios\";\nconst API_URL = \"https://dummyjson.com/users\";\nexport class UserService {\n  constructor() {\n    this.client = void 0;\n    // Initialize gRPC client if needed\n    this.initializeGrpcClient();\n  }\n  static getInstance() {\n    if (!UserService.instance) {\n      UserService.instance = new UserService();\n    }\n    return UserService.instance;\n  }\n  initializeGrpcClient() {\n    // This is a placeholder for gRPC client initialization\n    // In a real implementation, you would load the proto file and create the client\n  }\n  async getUsersHttp() {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data.users;\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      throw error;\n    }\n  }\n  async getUsersGrpc() {\n    // This is a placeholder for gRPC implementation\n    // In a real implementation, you would use the gRPC client\n    return this.getUsersHttp();\n  }\n  transformData(users) {\n    const departments = {};\n\n    // Group users by department\n    users.forEach(user => {\n      const department = user.company.department;\n      if (!departments[department]) {\n        departments[department] = {\n          male: 0,\n          female: 0,\n          ageRange: \"\",\n          hair: {},\n          addressUser: {}\n        };\n      }\n      const stats = departments[department];\n\n      // Update gender count\n      if (user.gender === \"male\") stats.male++;else stats.female++;\n\n      // Update hair color count\n      const hairColor = user.hair.color;\n      stats.hair[hairColor] = (stats.hair[hairColor] || 0) + 1;\n\n      // Update address mapping\n      const fullName = `${user.firstName}${user.lastName}`;\n      stats.addressUser[fullName] = user.address.postalCode;\n    });\n\n    // Calculate age ranges for each department\n    Object.keys(departments).forEach(department => {\n      const departmentUsers = users.filter(u => u.company.department === department);\n      const ages = departmentUsers.map(u => u.age);\n      const minAge = Math.min(...ages);\n      const maxAge = Math.max(...ages);\n      departments[department].ageRange = `${minAge}-${maxAge}`;\n    });\n    return departments;\n  }\n}\n_UserService = UserService;\nUserService.instance = void 0;","map":{"version":3,"names":["axios","API_URL","UserService","constructor","client","initializeGrpcClient","getInstance","instance","getUsersHttp","response","get","data","users","error","console","getUsersGrpc","transformData","departments","forEach","user","department","company","male","female","ageRange","hair","addressUser","stats","gender","hairColor","color","fullName","firstName","lastName","address","postalCode","Object","keys","departmentUsers","filter","u","ages","map","age","minAge","Math","min","maxAge","max","_UserService"],"sources":["C:/Users/user/Documents/coding/7solutions interview/My-Test-repo/src/api/userService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { UserResponse, User, TransformedData, DepartmentStats } from \"./types\";\r\nimport * as grpc from \"@grpc/grpc-js\";\r\nimport * as protoLoader from \"@grpc/proto-loader\";\r\n\r\nconst API_URL = \"https://dummyjson.com/users\";\r\n\r\nexport class UserService {\r\n  private static instance: UserService;\r\n  private client: any;\r\n\r\n  private constructor() {\r\n    // Initialize gRPC client if needed\r\n    this.initializeGrpcClient();\r\n  }\r\n\r\n  public static getInstance(): UserService {\r\n    if (!UserService.instance) {\r\n      UserService.instance = new UserService();\r\n    }\r\n    return UserService.instance;\r\n  }\r\n\r\n  private initializeGrpcClient(): void {\r\n    // This is a placeholder for gRPC client initialization\r\n    // In a real implementation, you would load the proto file and create the client\r\n  }\r\n\r\n  public async getUsersHttp(): Promise<User[]> {\r\n    try {\r\n      const response = await axios.get<UserResponse>(API_URL);\r\n      return response.data.users;\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async getUsersGrpc(): Promise<User[]> {\r\n    // This is a placeholder for gRPC implementation\r\n    // In a real implementation, you would use the gRPC client\r\n    return this.getUsersHttp();\r\n  }\r\n\r\n  public transformData(users: User[]): TransformedData {\r\n    const departments: TransformedData = {};\r\n\r\n    // Group users by department\r\n    users.forEach((user) => {\r\n      const department = user.company.department;\r\n      if (!departments[department]) {\r\n        departments[department] = {\r\n          male: 0,\r\n          female: 0,\r\n          ageRange: \"\",\r\n          hair: {},\r\n          addressUser: {},\r\n        };\r\n      }\r\n\r\n      const stats = departments[department];\r\n\r\n      // Update gender count\r\n      if (user.gender === \"male\") stats.male++;\r\n      else stats.female++;\r\n\r\n      // Update hair color count\r\n      const hairColor = user.hair.color;\r\n      stats.hair[hairColor] = (stats.hair[hairColor] || 0) + 1;\r\n\r\n      // Update address mapping\r\n      const fullName = `${user.firstName}${user.lastName}`;\r\n      stats.addressUser[fullName] = user.address.postalCode;\r\n    });\r\n\r\n    // Calculate age ranges for each department\r\n    Object.keys(departments).forEach((department) => {\r\n      const departmentUsers = users.filter(\r\n        (u) => u.company.department === department\r\n      );\r\n      const ages = departmentUsers.map((u) => u.age);\r\n      const minAge = Math.min(...ages);\r\n      const maxAge = Math.max(...ages);\r\n      departments[department].ageRange = `${minAge}-${maxAge}`;\r\n    });\r\n\r\n    return departments;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}